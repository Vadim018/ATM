using System;
using System.Windows.Forms;

namespace ATM // оголошуються класи і об'єкти
{
    internal static class Program
    {
        public static string CardNumber { get; set; } // зберігання номеру карти
        public static int WithdrawalAmount { get; set; }
        public static int CurrentBalance { get; set; }
        public static string TransactionType { get; set; }
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles(); // параметр за замовчуванням для сумісного рендерингу текстів
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}

/*

    void: вказує на те, що метод не повертає значення. void просто виконує дії, але не повертає ніякого результату.**

    static: модифікатор, який вказує, що метод або поле належить до класу, а не до конкретного об'єкта класу (без створення екземпляра класу).**

    public: вказує на те, що член класу (метод, властивість, поле тощо) доступний ззовні класу, тобто його можна використовувати в будь-якому іншому коді.**

    private: вказує на те, що член класу доступний тільки всередині самого класу, і не може бути доступний ззовні.**

    internal: вказує на те, що член класу доступний тільки всередині збірки (assembly), в якому він визначений.**

    partial: вказує на те, що оголошення класу розділено на кілька частин, розташованих у різних файлах.**

    get: використовується в оголошенні властивості для визначення метода, який повертає значення цієї властивості.**

    set: використовується в оголошенні властивості для визначення метода, який приймає значення і встановлює його властивість.**

    Клас - шаблон, що визначає структуру і поведінку об'єктів. 
    Коли ви створюєте екземпляр класу, ви фактично реалізовуєте 
    цей шаблон, створюючи об'єкт, який відповідає визначеному класу.

    -- У вас є клас Car, який має характеристики, такі як марка, модель, 
    рік випуску тощо, і методи, такі як Drive() або Stop(), ви можете 
    створити екземпляр цього класу, наприклад, myCar, який буде представляти 
    конкретну машину. Ви можете мати багато екземплярів класу Car, кожен з яких 
    буде мати свої власні значення для характеристик і буде мати можливість 
    виконувати методи класу Car. Отже, екземпляр класу - це конкретне втілення (об'єкт) 
    класу з усіма його властивостями і методами, яке існує в пам'яті під час виконання програми. --

*/

/*

    - Операційна система
    Банкомати працюють під управлінням спеціалізованих версій ОС, таких як Windows Embedded або Linux. 
    Ці ОС оптимізовані для вбудованих систем і мають забезпечувати надійність та безпеку.

    - Інтеграція з банківською системою
    Банкомати пов'язані з центральною банківською системою через протоколи зв'язку, такі як ISO 8583. 
    Це стандартний протокол для обміну фінансовою інформацією між банківськими системами. 
    Інформація про транзакції обробляється центральною системою банку.

    - Програмне забезпечення банкомата
    На банкоматі запускається ПЗ, написане мовою C# або C++. Це ПЗ керує всіма функціями банкомата, включаючи:
    * взаємодію з клієнтом;
    * обробку карток;
    * зняття коштів.

    - Безпека
    Банкомати мають вбудовані заходи безпеки, такі як шифрування даних, захист від шахраїв, камери спостереження і т. д. 
    Заходи безпеки також включають захист від злому ПЗ або фізичного злому банкомата.

    - Оновлення ПЗ
    Банки регулярно випускають оновлення ПЗ для банкоматів для поліпшення функціональності та забезпечення безпеки. 
    Ці оновлення можуть встановлюватися через мережу або шляхом фізичного оновлення ПЗ через USB або CD.
 
*/